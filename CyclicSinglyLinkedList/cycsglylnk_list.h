#ifndef CYCLICSINGLYLINKEDLIST_SGLYLNK_LIST_H
#define CYCLICSINGLYLINKEDLIST_SGLYLNK_LIST_H

#include <stdbool.h>

typedef int CycSglyLnkElemType;

typedef struct slnknode
{
	CycSglyLnkElemType elem;
	struct slnknode *next;
}*CycSLnkPosition, CycSLnkNode;

typedef struct
{
	CycSLnkPosition head, rear;
	int length;
}CycSLnkList;


_Bool ListInitial_cycslnk(CycSLnkList *const slnklistptr);
//构造一个带头节点空的链表*slnklistptr

void ListDestroy_cycslnk(CycSLnkList *const slnklistptr);
//销毁链表*slnklistptr,*slnklistptr表结构将不存在

void ListClear_cycslnk(CycSLnkList *const slnklistptr);
//将链表*slnklistptr重置为空表,并释放原链表的结点空间,表结构依然存在

_Bool ListInsNodeFirst_cycslnk(CycSLnkList *const slnklistptr, const CycSLnkPosition inspos);
//将slnkpos所值结点插入在链表*slnklistptr的第一个结点之前

_Bool ListDelNodeFirst_cycslnk(CycSLnkList *const slnklistptr, CycSLnkPosition *const slnkposret);
//删除链表*slnklistptr的第一个结点,并由指针slnkposret返回该结点

void ListAppend_cycslnk(CycSLnkList *const slnklistptr, CycSLnkPosition slnkposhead);
//将指针slnkposhead所指(彼此以指针相链)的一串结点链接在线性链表*slnklistptr的最后一个结点之后
//并改变链表*slnklistptr的尾指针指向新的尾结点

_Bool ListRemoveRear_cycslnk(CycSLnkList *const slnklistptr, CycSLnkPosition *slnkposret);
//删除线性链表*slnklistptr中的尾结点并以slnkposret返回,改变链表*slnklistptr中尾指针指向新的尾结点

_Bool ListInsNodeBefore_cycslnk(CycSLnkList *const slnklistptr, CycSLnkPosition lspos, CycSLnkPosition inspos);
//lspos指向线性链表*slnklistptr中的一个结点,将inspos所之结点插在lspos所指结点之前,并且修改指针lspos指向新插入的结点

_Bool ListInsNodeAfter_cycslnk(CycSLnkList *const slnklistptr, CycSLnkPosition lspos, CycSLnkPosition inspos);
//lspos指向线性链表*slnklistptr中的一个结点,将inspos所之结点插在lspos所指结点之后,并且修改指针lspos指向新插入的结点

_Bool ListDelNodeBefore_cycslnk(CycSLnkList *const slnklistptr, CycSLnkPosition lspos, CycSLnkPosition *retpos);
//lspos指向线性链表*slnklistptr中的一个结点,将删除lspos的直接前驱结点,由指针retpos返回删除的结点,如果失败retpos返回NULL

_Bool ListDelNodeAfter_cycslnk(CycSLnkList *const slnklistptr, CycSLnkPosition lspos, CycSLnkPosition *retpos);
//lspos指向线性链表*slnklistptr中的一个结点,将删除lspos的直接后继结点,由指针retpos返回删除的结点,如果失败retpos返回NULL

void ListSetCurElem_cycslnk(CycSLnkPosition curpos, const CycSglyLnkElemType elem);
//curpos指向线性链表中的一个结点,用elem更新curpos所指结点中数据元素的值

CycSglyLnkElemType ListGetCurElem_cycslnk(CycSLnkPosition curpos);
//curpos指向线性链表中的一个结点,返回curpos所指结点中数据元素的值

_Bool ListIsEmpty_cycslnk(const CycSLnkList *const slnklistptr);
//线性链表*slnklistptr为空返回true,否则返回false

int ListLength_cycslnk(const CycSLnkList *const slnklistptr);
//返回线性链表*slnklistptr中元素的个数

CycSLnkPosition ListGetHead_cycslnk(const CycSLnkList *const slnklistptr);
//返回线性链表*slnklistptr中头结点的位置

CycSLnkPosition ListGetRear_cycslnk(const CycSLnkList *const slnklistptr);
//返回线性链表*slnklistptr最后一个结点的位置

_Bool ListPriorPos_cycslnk(const CycSLnkList *const slnklistptr, const CycSLnkPosition curpos, CycSLnkPosition *retpos);
//curpos指向线性链表*slnklistptr中的一个结点，由指针retpos返回curpos所指结点的直接前驱的位置,若无前驱指针返回NULL

_Bool ListNextPos_cycslnk(const CycSLnkList *const slnklistptr, const CycSLnkPosition curpos, CycSLnkPosition *retpos);
//curpos指向线性链表*slnklistptr中的一个结点，由指针retpos返回curpos所指结点的直接后继的位置,若无后继指针返回NULL

_Bool ListLocatePos_cycslnk(const CycSLnkList *const slnklistptr, const int index, CycSLnkPosition *retpos);
//用指针retpos返回线性链表*slnklistptr中第index个结点的位置

_Bool ListLocateElem_cycslnk(const CycSLnkList *const slnklistptr, const CycSglyLnkElemType elem, _Bool(*compare)(CycSglyLnkElemType, CycSglyLnkElemType), CycSLnkPosition *retpos);
//用指针retpos返回线性链表*slnklistptr中第一个与elem满足compare()判定关系的元素位置,若不存在返回NULL

void ListTraverse_cycslnk(const CycSLnkList *const slnklistptr);
//依次输出线性链表*slnklistptr中的每一个元素

_Bool IsGreaterThan_cycslnk(const CycSglyLnkElemType e1, const CycSglyLnkElemType e2);
//如果e1>e2返回true,否则返回false


_Bool IsGreaterThanOrEqual_cycslnk(const CycSglyLnkElemType e1, const CycSglyLnkElemType e2);
//如果e1>=e2返回true,否则返回false


_Bool IsEqual_cycslnk(const CycSglyLnkElemType e1, const CycSglyLnkElemType e2);
//如果e1=e2返回true,否则返回false


_Bool IsLessThan_cycslnk(const CycSglyLnkElemType e1, const CycSglyLnkElemType e2);
//如果e1<e2返回true,否则返回false


_Bool IsLessThanOrEqual_cycslnk(const CycSglyLnkElemType e1, const CycSglyLnkElemType e2);
//如果e1<=e2返回true,否则返回false


#endif // !CYCLICSINGLYLINKEDLIST_SGLYLNK_LIST_H